#!/bin/bash

echo "Staring Vault auto-init configuration loader..."
echo "by Mi≈Çosz Gilga <https://miloszgilga.pl>"

echo ""
echo "=============================================================="
echo "WARNING! Do NOT USE this version at production!"
echo "Vault at startup is UNSEALED and KV secrets are stored in RAM."
echo "=============================================================="
echo ""
echo "Staring Vault server daemon..."
echo ""

server_port=${VAULT_AUTO_INIT_SERVER_PORT:-8200}
root_token=${VAULT_AUTO_INIT_ROOT_TOKEN:-"admin"}
kv_engine=${VAULT_AUTO_INIT_KV_ENGINE:-"dev"}

vault server -dev \
  -dev-listen-address="0.0.0.0:$server_port" \
  -dev-root-token-id="$root_token" \
  -config=/vault/config/vault.hcl &

vault_daemon_pid=$!

echo "Saved Vault daemon PID: \"$vault_daemon_pid\""
echo "Wait for init Vault server..."

export VAULT_ADDR="http://127.0.0.1:$server_port"

while true; do
  status_output=$(vault status)
  initialized=$(echo "$status_output" | awk '/Initialized/{print $2}')
  if [[ "$initialized" == "true" ]]; then
    echo "Vault is initialized."
    break
  fi
  sleep 3
done

vault secrets enable -path=$kv_engine kv
echo "Start inserting KV secrets..."

for kv_storage in $(env | grep "^KV_STORAGE_"); do
	IFS='=' read -r kv_storage_key kv_storage_name <<< "$kv_storage"

	secrets_data=""
	secrets_count=0

	if [[ $kv_storage_key =~ ^KV_STORAGE_(NORMAL|JSON)_([0-9]+)$ ]]; then
		kv_storage_index="${BASH_REMATCH[2]}"
		json_file_name="${kv_storage_name}_${kv_storage_index}.json"

		# normal key-value pairs
		if [[ $kv_storage_key =~ ^KV_STORAGE_NORMAL_([0-9]+)$ ]]; then
			echo "{" >> $json_file_name
			first_item=true

			for kv_secret in $(env | grep -w "^V_.*_${kv_storage_index}"); do
				IFS='=' read -r kv_secret_key_with_id kv_secret_value <<< "$kv_secret"
				kv_secret_key=$(echo "$kv_secret_key_with_id" | sed 's/_[0-9]\+$//')

				if [[ "$first_item" == true ]]; then
					first_item=false
				else
					echo "," >> $json_file_name
				fi
				echo "\""$kv_secret_key"\": \""$kv_secret_value"\"" >> $json_file_name

				((secrets_count++))
				echo "Add KV normal secret: \"$kv_secret_key\" with KV storage: \"$kv_engine/$kv_storage_name\""
			done
			echo "}" >> $json_file_name

		elif [[ $kv_storage_key =~ ^KV_STORAGE_JSON_([0-9]+)$ ]]; then
			json_key="KV_VALUE_JSON_${kv_storage_index}"
			json_value=${!json_key}

			if echo "$json_value" | jq empty >/dev/null 2>&1; then
				echo $json_value > $json_file_name
				echo "Add KV json secret to KV storage: \"$kv_engine/$kv_storage_name\""
			else
				echo "Incorrect json secret format for storage: \"$kv_engine/$kv_storage_name\". Skipping."	
			fi
		fi

		vault kv put "$kv_engine/$kv_storage_name" @$json_file_name
		echo "Put KV secrets count: $secrets_count into KV: \"$kv_engine/$kv_storage\""

		rm $json_file_name
	fi
done

wait $vault_daemon_pid